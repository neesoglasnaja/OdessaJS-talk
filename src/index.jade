include ./blocks/slide.jade
include ./blocks/cover.jade
include ./blocks/quote.jade
include ./blocks/frame.jade

- var title = "Как внедрить стандарты разработки, чтобы никто не&nbsp;пострадал"

doctype html
html(lang='ru')
  head
    title !{title}
    meta(charset='utf-8')
    meta(http-equiv='x-ua-compatible', content='ie=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel='stylesheet', href='shower/themes/ribbon/styles/screen-16x10.css')
    link(rel='stylesheet', href='theme.css')
    link(rel='stylesheet', href='slides.css')
    link(rel='stylesheet', href='highlight/styles/github.css')
  body.shower.list
    header.caption
      h1 !{title}
    +slide({name: 'cover', header: title, classes:'cover'})
      p Александра Шинкевич (
        a(href='https://twitter.com/neesoglasnaja' target="_blank") @neesoglasnaja
        | )
      img.cover(src='pictures/bat-signal.jpg')
    +slide({header: "Кто я?", classes: "label-header right black"})
      ul
        li Глава отдела фронтенда, LOVATA
        li Full-stack Node.js разработчик
      p
        img.logo(src="pictures/minskcss.png")
        img.logo(src="pictures/minskjs.png")
        img.logo.css-m-js(src="pictures/css-minsk-js.svg")
      img.cover.height(src='pictures/bg-blur.jpg')
      img.cover.place.left(src='pictures/about-cover.jpg')
    +slide({header: "О чем буду говорить?", classes: "label-header black"})
      ul
        li Как унифицировать codestyle (HTML, CSS, JS)
        li Как автоматизировать его проверку
        li Как внедрить проверку в CI
      img.place.right.cover.height(src='pictures/cave-angle.png')
    +slide({header: "", classes: "black label-header clear"})
      img.cover.width(src="pictures/batman_vs_superman.jpg")
      h2.place.bottom Guidelines&nbsp;&nbsp;&nbsp;VS&nbsp;&nbsp;&nbsp;Styleguide
    +slide({header: "Guidelines", classes: "label-header"})
      img(src='pictures/blackberry_guideline.jpg', style='width: 116%; margin-left: -8%;')
    +slide({header: "Guidelines", classes: "label-header black"})
      ul
        li Набор стандартов и инструкций по использованию фирменного стиля
          ul
            li.next Применение логотипов, знаков
            li.next Шрифты
            li.next Цвета
            li.next Правильное размещение на носителях
        li.next Самостоятельный документ
    +slide({header: "Styleguide", classes: "label-header"})
      img.cover.width(src='../pictures/styleguide.jpg')
    +slide({header: "Styleguide", classes: "label-header black"})
      ul
        li Коллекция предварительно созданных элементов и правил
        li.next В идеале — интерактивность
        li.next Может содержать код
      footer
        p Но они просто так никому не нужны
        p Это скорее про то, каким должен быть интерфейс, а не код
    +slide({header: "React Styleguidist", classes: "label-header"})
      img(src='../pictures/styleguidist-button.jpg', style='width: 90%;')
    +slide({header: "Code Style", classes: "", styles: "background-color: #F7F6F6;"})
      p Правила, по которым надо писать код
      ul
        li Для быстрого восприятия кода
        li Для предотвращения ошибок в коде
        li Для быстрого написания кода
      img.place.right.cover.height(src="../pictures/always-be-batman.png", alt="Be Batman")
      footer
        p Но и он никому не нужен (на самом деле)
    +slide({header: "Linters", classes: "black label-header"})
      p Автоматическая проверка кода
      img.cover.height(src="../pictures/batman-vision.jpg", alt="")
    +slide({header: "Linters", classes: "black label-header"})
      ul
        li Правила хранятся в репозитории проекта
        li.next Они внедрены в процесс сборки
        li.next Ошибки видно в редакторе
        li.next Невалидный код не попадает в общую кодовую базу
    +slide({header: "С чего начать?", classes: ""})
      p С настройки редактора
      img.place.right(src='pictures/mechanic.jpg', height="100%")
      img.place.right.next(src='pictures/editorconfig-logo.png', style='width: 420px; top: 159px; right: 80px;')
    +slide({header: ".editorconfig", classes: ""})
      ul
        li Единый формат настроек для всех IDE
        li Конец войны "табы или пробелы"
        li Разные настройки для разных файлов
    +slide({header: "", classes: "clear"})
      h2.shout.faded.next Из коробки
      img.cover.height(src='pictures/bg-blur.jpg')
      +cover('pictures/editorconfig-native.png')
    +slide({header: "", classes: "clear"})
      h2.shout.faded.next Есть плагин
      img.cover.height(src='pictures/bg-blur.jpg')
      +cover('pictures/editorconfig-plugin.png')
    +slide({header: "Формат .editorconfig", classes: ""})
      pre
        code
          | root = true
          | &nbsp;
          | [*]
          | end_of_line = lf
          | insert_final_newline = true
          | charset = utf-8
          | indent_style = space
          | indent_size = 4
          | &nbsp;
          | [*.{md,jade}]
          | indent_style = tab
    +slide({header: "HTML", classes: "label-header"})
      img.cover.height(src='pictures/bg-blur.jpg')
      div.place
        p.center
          img(src='pictures/htmlhint.png')
        p.center(style='font-size: 1.2em; background-color: rgba(0,0,0,0.7)')
          a.link.link-github-white(href='https://github.com/yaniswang/HTMLHint') yaniswang/HTMLHint
    +slide({header: "", classes: ""})
      .terminal.place(data-content='HTMLHint')
        p npm install htmlhint -g
        p htmlhint test.html
    +slide({header: ".htmlhintrc", classes: ""})
      pre
        code.hljs
          |{
          |    "tagname-lowercase": true,
          |    "attr-lowercase": true,
          |    "attr-value-double-quotes": true,
          |    "doctype-first": true,
          |    "tag-pair": true,
          |    "spec-char-escape": true,
          |    "id-unique": true,
          |    "src-not-empty": true,
          |    "attr-no-duplication": true,
          |    "title-require": true
          |}
    +slide({header: "", classes: ""})
      .terminal(data-content='gulp-htmlhint')
        p npm install --save-dev gulp-htmlhint
      img.place.right.bottom(src='pictures/gulp-logo.svg', style='width: 100px; margin: 50px;')
      pre
        code.hljs
          | &nbsp;
          | const htmlhint = require('gulp-htmlhint');
          | gulp
          |    .src('./src/*.html')
          |    .pipe(htmlhint());
    +slide({header: "", classes: ""})
      .terminal(data-content='grunt-htmlhint')
        p npm install --save-dev grunt-htmlhint
      img.place.right.bottom(src='pictures/grunt-logo.svg', style='width: 120px; margin: 50px;')
      pre
        code.hljs
          | &nbsp;
          | grunt.loadNpmTasks('grunt-htmlhint');
          | ...
          | htmlhint: {
          |   options: {
          |     htmlhintrc: '.htmlhintrc'
          |   },
          | }
    +slide({header: "", classes: ""})
      .terminal(data-content='htmlhint-loader')
        p npm install --save-dev htmlhint-loader
      img.place.right.bottom(src='pictures/webpack-logo.svg', style='width: 150px; margin: 50px;')
      pre
        code.hljs
          | &nbsp;
          | module.exports = {
          |   module: {
          |     rules: [{
          |       enforce: 'pre',
          |       test: /\.html/,
          |       loader: 'htmlhint-loader',
          |       exclude: /node_modules/
          |     }]
          |   }
          | }
    +slide({header: "На любой вкус", classes: "label-header"})
      ul
        li
          a(href="https://www.npmjs.com/package/htmllint") htmllint
        li
          a(href="https://www.npmjs.com/package/html-lint") html-lint
        li
          a(href="https://www.npmjs.com/package/pug-lint") pug-lint
        li
          a(href="https://www.npmjs.com/package/markdownlint") markdownlint
      img.place.right.bottom(src="../pictures/robin-costumes.png", alt="", style="width: 50%; margin: 50px;")
    +slide({header: "CSS", classes: "label-header", styles: "background-color: #F2F2F2;"})
      p Stylelint
      img.place(src="../pictures/stylelint.png", alt="Stylelint")
    +slide({header: "Stylelint", classes: "black label-header"})
      ul
        li 170 встроенных правил
        li Возможность написания и подключения плагинов
        li Возможность расширения готовых конфигураций
        li Работает с препроцессорными кодом (SCSS, Less, PostCSS)
    +slide({header: ".stylelintrc", classes: ""})
      pre
        code.hljs
          | {
          |   "extends": "stylelint-config-recommended",
          |   "rules": {
          |     "at-rule-no-unknown": [ true, {
          |       "ignoreAtRules": [
          |         "extends"
          |       ]
          |     }],
          |     "block-no-empty": null,
          |     "unit-whitelist": ["em", "rem", "s"]
          |   }
          | }
    +slide({header: "", classes: ""})
      .terminal.place(data-content='stylelint')
        p npm install -g stylelint
        p stylelint "styles/*.css"
    +slide({header: "Плагины для редакторов", classes: ""})
      div(style="display: flex; justify-content: center; align-items: center; flex-wrap: wrap;")
        img(src="../pictures/vim-logo.svg", alt="Vim", style="height: 150px; margin: 10px 30px;")
        img(src="../pictures/emacs-logo.svg", alt="Emacs", style="height: 150px; margin: 10px 30px;")
        img(src="../pictures/atom-logo.svg", alt="Atom", style="height: 150px; margin: 10px 30px;")
        img(src="../pictures/vscode-logo.svg", alt="VSCode", style="height: 150px; margin: 10px 30px;")
        img(src="../pictures/sublime-text-logo.png", alt="Sublime Text", style="height: 150px; margin: 10px 30px;")
      p.center
        a(href="https://stylelint.io/user-guide/complementary-tools/#editor-plugins") stylelint.io/editor-plugins
    +slide({header: "WebStorm", classes: ""})
      img.cover.width(src="../pictures/webstorm-stylelint.png", alt="WebStorm Stylelint integration")
    +slide({header: "", classes: ""})
      h2
        a.link.link-github(href="https://github.com/morishitter/stylefmt") morishitter/stylefmt
      img.place(src="../pictures/stylefmt-logo.svg", alt="Stylefmt", width="50%")
    +slide({header: "", classes: ""})
      .terminal(data-content='gulp-stylelint')
        p npm install stylelint gulp-stylelint --save-dev
      img.place.right.bottom(src='pictures/gulp-logo.svg', style='width: 100px; margin: 50px;')
      pre
        code.hljs
          | &nbsp;
          | const stylelint = require('gulp-stylelint');
          | gulp
          |    .src('./src/*.css')
          |    .pipe(gulpStylelint({
          |       reporters: [
          |         { formatter: 'string', console: true }
          |       ]
          |    }));
    +slide({header: "", classes: ""})
      .terminal(data-content='grunt-stylelint')
        p npm install stylelint grunt-stylelint --save-dev
      img.place.right.bottom(src='pictures/grunt-logo.svg', style='width: 120px; margin: 50px;')
      pre
        code.hljs
          | &nbsp;
          | grunt.loadNpmTasks('grunt-stylelint');
          | ...
          | grunt.initConfig({
          |   stylelint: {
          |     all: ['css/**/*.css', 'sass/**/*.scss']
          |   }
          | });
    +slide({header: "", classes: ""})
      .terminal(data-content='stylelint-webpack-plugin')
        p npm install stylelint-webpack-plugin --save-dev
      img.place.right.bottom(src='pictures/webpack-logo.svg', style='width: 150px; margin: 50px;')
      pre
        code.hljs
          | &nbsp;
          | const StyleLintPlugin = require('stylelint-webpack-plugin');
          | &nbsp;
          | module.exports = {
          |   plugins: [
          |     new StyleLintPlugin(options),
          |   ]
          | }
    +slide({header: "Хочется больше?", classes: "label-header"})
      ul
        li
          a(href="https://www.npmjs.com/package/sass-lint") sass-lint
        li
          a(href="https://www.npmjs.com/package/stylelint-scss") stylelint-scss
        li
          a(href="https://www.npmjs.com/package/lesshint") lesshint
        li
          a(href="https://www.npmjs.com/package/stylint") stylint
        li
          a(href="https://www.npmjs.com/package/stylelint-selector-bem-pattern") stylelint-selector-bem-pattern
      img.place.right.bottom(src="../pictures/dick-greyson-versions.jpg", alt="", style="width: 50%; margin: 50px;")
    +slide({header: "CSScomb", classes: ""})
      img.place(src="../pictures/csscomb-logo.jpg", alt="CSSComb")
    +slide({header: "", classes: ""})
      .terminal.place(data-content='CSScomb')
        p npm install csscomb -g
        p csscomb assets/css
    +slide({header: ".csscomb.json", classes: ""})
      pre(style="font-size: 0.7em;")
        code.hljs
          | {
          |   "always-semicolon": true,
          |   "eof-newline": true,
          |   "leading-zero": true,
          |   "quotes": "single",
          |   ...,
          |   "sort-order": [
          |     [
          |       "position",
          |       "z-index"
          |     ],
          |     [
          |       "display",
          |       "visibility"
          |     ]
          |   ]
          | }
    +slide({header: "CSSComb", classes: "black label-header"})
      ul
        li 24 встроенных правила
        li Возможность сортировки любых свойств по блокам
        li Встроенные конфигурации
        li
          code (master) Latest commit on 16 Feb 2017
    +slide({header: "Плагины для редакторов", classes: ""})
      div(style="display: flex; justify-content: center; align-items: center; flex-wrap: wrap;")
        img(src="../pictures/vim-logo.svg", alt="Vim", style="height: 150px; margin: 20px 30px;")
        img(src="../pictures/emacs-logo.svg", alt="Emacs", style="height: 150px; margin: 20px 30px;")
        img(src="../pictures/atom-logo.svg", alt="Atom", style="height: 150px; margin: 20px 30px;")
        img(src="../pictures/vscode-logo.svg", alt="VSCode", style="height: 150px; margin: 20px 30px;")
        img(src="../pictures/sublime-text-logo.png", alt="Sublime Text", style="height: 150px; margin: 20px 30px;")
        img(src="../pictures/brackets-icon.svg", alt="Brackets", style="height: 150px; margin: 20px 30px;")
    +slide({header: "", classes: ""})
      h2.shout(style="font-size: 2em;")
        a.link.link-github(href="https://github.com/davidhund/styleguide-generators#css-parsing-css-source") davidhund/styleguide-generators
    +slide({header: "JS", classes: "label-header", styles: "background-color: #EEEEEE"})
      img.cover(src="../pictures/eslint-logo.jpg", alt="ESLint" width="80%")
    +slide({header: "ESint", classes: "black label-header"})
      ul
        li 250+ встроенных правил
        li Возможность написания и подключения плагинов
        li Возможность расширения готовых конфигураций
        li Поддерживает различные версии стандартов (ES5/ES6/ESNext)
    +slide({header: ".eslintrc", classes: ""})
      pre(style="font-size: 0.9em;")
        code.hljs
          | {
          |   "parserOptions": {
          |     "parser": "babel-eslint",
          |     "sourceType": "module"
          |   },
          |   "env": { "browser": true },
          |   "extends": ["airbnb-base"],
          |   "plugins": ["vue"],
          |   "rules": {
          |     "semi": ["error", "always"],
          |     "no-debugger": "warn"
          |   }
          | }
    +slide({header: "", classes: ""})
      .terminal.place(data-content='eslint')
        p npm install -g eslint
        p eslint --init
        p eslint scipts/*.js
    +slide({header: "", classes: ""})
      .terminal(data-content='gulp-eslint')
        p npm install gulp-eslint --save-dev
      img.place.right.bottom(src='pictures/gulp-logo.svg', style='width: 100px; margin: 50px;')
      pre
        code.hljs
          | &nbsp;
          | const eslint = require('gulp-eslint');
          | gulp
          |    .src('./scripts/*.js')
          |    .pipe(eslint())
          |    .pipe(eslint.format())
          |    .pipe(eslint.failAfterError());
    +slide({header: "", classes: ""})
      .terminal(data-content='grunt-eslint')
        p npm install grunt-eslint --save-dev
      img.place.right.bottom(src='pictures/grunt-logo.svg', style='width: 120px; margin: 50px;')
      pre
        code.hljs
          | &nbsp;
          | require('load-grunt-tasks')(grunt);
          | &nbsp;
          | grunt.initConfig({
          |   eslint: {
          |     target: ['file.js']
          |   }
          | });
    +slide({header: "", classes: ""})
      .terminal(data-content='eslint-loader')
        p npm install eslint eslint-loader --save-dev
      img.place.right.bottom(src='pictures/webpack-logo.svg', style='width: 150px; margin: 50px;')
      pre
        code.hljs.javascript
          | &nbsp;
          | module.exports = {
          |   module: {
          |     rules: [{
          |       test: /\.js$/,
          |       exclude: /node_modules/,
          |       loader: "eslint-loader",
          |       options: { emitError: true }
          |     }]
          |   }
          | }
    +slide({header: "Плагины для редакторов", classes: ""})
      div(style="display: flex; justify-content: center; align-items: center; flex-wrap: wrap;")
        img(src="../pictures/vim-logo.svg", alt="Vim", style="height: 150px; margin: 20px 30px;")
        img(src="../pictures/emacs-logo.svg", alt="Emacs", style="height: 150px; margin: 20px 30px;")
        img(src="../pictures/atom-logo.svg", alt="Atom", style="height: 150px; margin: 20px 30px;")
        img(src="../pictures/vscode-logo.svg", alt="VSCode", style="height: 150px; margin: 20px 30px;")
        img(src="../pictures/sublime-text-logo.png", alt="Sublime Text", style="height: 150px; margin: 20px 30px;")
      p.center
        a(href="https://eslint.org/docs/5.0.0/user-guide/integrations") eslint.org/integrations
    +slide({header: "StandardJS", classes: ""})
    +slide({header: "Airbnb", classes: ""})
    +slide({header: "", classes: ""})
      p babel-eslint
      p tslint
      p eslint-plugin-flowtype
    +slide({header: "", classes: ""})
      p http://usejsdoc.org/
    +slide({header: "Форматирование", classes: ""})
      p prettier
    +slide({header: "", classes: "black label-header"})
      h2.shout(style="margin: 0 105px;") Запрещаем коммитить плохой код
      img.cover.height(src="../pictures/joker-prison.jpg", alt="")
    +slide({header: ".git/hooks/pre-commit", classes: ""})
      pre
        code.hljs
          | #! /bin/bash
          | if !(npm run lint:js --silent)
          |   exit 1;
          | fi
    +slide({header: "", classes: ""})
      .terminal(data-content='pre-commit')
        p npm install --save-dev pre-commit
      pre(style="font-size: 0.9em;")
        code.hljs
          | &nbsp;
          | {
          |   "name": "my-project",
          |   "scripts": {
          |     "lint:js": "eslint ./js/*.js",
          |     "test": "echo '🤣 No' && exit 1"
          |   },
          |   "pre-commit": [
          |     "lint:js",
          |     "test"
          |   ]
          | }
    +slide({header: "Выбери свой вариант", classes: "label-header"})
      ul
        li
          a.link.link-github(href="https://github.com/observing/pre-commit") observing/pre-commit
        li
          a.link.link-github(href="https://github.com/okonet/lint-staged") okonet/lint-staged
        li
          a.link.link-github(href="https://github.com/typicode/husky") typicode/husky
      img.place.right.cover.height(src="../pictures/alfred.jpg")
    +slide({header: "Работа с git", classes: ""})
      p Git flow - как ветвиться
    +slide({header: '', classes: 'clear black'})
      img.cover.height(src='pictures/git-flow-meme.jpg')
    +slide({header: '', classes: 'clear'})
      img.cover.height(src='pictures/git-flow.png')
    +slide({header: "", classes: "clear"})
      img.cover.height(src="../pictures/lego-batman.jpg")
    +slide({header: "", classes: "clear"})
      img.cover.width(src="../pictures/sad-batman.jpg")
    +slide({header: "Проблема 1. Сборка падает из-за слишком строгих правил", classes: ""})
      p Решение - даунгрейдить в сборке "мешаюшие" свойства на warn
      ul
        li Создаем еще 1 файл конфига .dev.eslintrc
        li В нем extend от существующего конфига
        li Добавляем правила с уровнем warn
        li В webpack по ключу ENV подключаем нужный конфиг
    +slide({header: "Проблема 2. Плохой код попадает в репозиторий", classes: ""})
      p Решение - делать проверки в CI
      p Bitbucket - Pipelines
      p Github - TravisCI
      p GitLab -
    +slide({header: "Подводя итог", classes: ""})
      ul
        li Настроить редактор
        li Линтеры
        li Документация
        li Git hooks
        li CI
    +slide({header: "Материалы по теме", classes: ""})
      ul
        li
          a(href='https://www.youtube.com/watch?v=HZF3XRNOpGo') Кодстайл и насилие — Антон Немцев
        li
          a(href='https://www.youtube.com/watch?v=jcTD-zpY5RM') Как оптимизировать фронтенд — Мария Кабаш
    +slide({name: 'theend', header: "Вопросы?", shout: true, classes: 'cover label-header'})
      p.end-link
        a.bigger(href="http://bit.ly/Standards-OdessaJS" target="_blank") bit.ly/Standards-OdessaJS
        br
        | Александра Шинкевич (
        a(href='https://twitter.com/neesoglasnaja' target="_blank") @neesoglasnaja
        | )
      +cover('pictures/batman-comics.jpg')

    .progress
    script(src='shower/shower.min.js')
    script(src='highlight/highlight.pack.js')

    script(type='text/javascript') hljs.initHighlightingOnLoad();
